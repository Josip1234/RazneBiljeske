                                                  OSNOVE PHP-A
php - hypertext preprocessor (personal home page tools) 1994.godina
sličan c-u
1995. prva verzija
1999 -
PHP7 2016
PHP 8
nije bio namijenjen kao jezik
evoulirao u jezik za izradu web stranica
najrasprostranjeniji za izradu web aplikacija (interaktivno, osim statičkog sučelja,
postoje interakcije)
wordpress - kreiran u php-u
facebook
neprekidna nadogranja
trenutna verzija 8.4
c://windows//system32/drivers/etc/hosts
operatori.php nadopuniti skriptu dobivenom od nastavnika
                                                  postupak a-ž
Što je php? Programski jezik koji je
nastao 1994.godine kada ga je Rasmus
Lerdorf napisao ao naredbu u c-u
za praćenje posjeta svojoj osobnoj stranici
Interpretirani server side programski jezik
koji se orijentira po sintaksi c-a, on je 
nazvan u početku kao personal home page
tools prva javna verzija je objavljena 1995.
godine kada je kao izvorni kod alata php 
interpreter nastao koji je omogućavao obradu
obrazaca, interakciju sa bazom podataka
tada se je mogao proširivati i doprograminjivati,
ispravljati kod a daljnji razvoj je 
išao od 1999. kada je nastala verzija 4 prije
se koristio zend engine zatim PHP7 2015/2016
godine kada je donio zend engine 3, pojačana
brzina za wordpress PHP8 je isto tako donio
poboljšanu sintaksu i nekakve napredne stvari 
taj jezik zapravo ije bio namjenjen da se
stvori kao jezik po konceptu, nego je Rasmus
htio riješiti neki vlastiti problem tj.
posjet(broj posjeta) na web stranici i tako 
je evoluirao iz alata za praćenje posjeta
u jezik za izradu dinamičkih web stranica
on je pretežito server side scripting jezik
koji je široko rasprostranjen danas jedan od
najrasprostranjenijih open source programskih
jezika za izradu web stranica odnosno 
web aplikacija (web stranica je više statična,
malo dinamična preko javascripta i tako dalje)
webaplikacija - interaktivna, osim svog
statičkog sučelja, ima nekakvu dinamiku u 
backendu,koja se izvodi baš pomoću php-a,
široko rasprostranjen a najviše ga koristi
wordpress, najkorištenija cms platforma
bazirana na php-u, oko 40% webstranica
danas i nekakvi portali poput društvenih
mreća(facebook), portali poput wikipedije, 
i brojni drugi(php ili neke formate izvedene
iz njega)
Zašto se još drži?
Ima veliki comunnity sustav, jednostavan je za
početnike, ima neprekidnu nadogradnju, ima 
kompatibilnost(podržava i starije verzije)
Trenutna verzija je 8.4 (21.11.2024)
Support verzije traju otprilike 2 godine
a security još više
PHP SINTAKSA
Interpreter izvršavakod unutar svojih markera
<?php ?>
Svrha je da se označi koji se točno dio koda odnosi 
na ostali kod tipa javascript ili html
Sve varijable koje se definiraju u php-u imaju
simbol $ tip nije unaprijed određen,
u php-u ne postoji eksplicitni tip podataka kao u 
c-u ili C# gdje će nešto biti char, nešto int, 
nešto string itd. Što god se da, on će to primiti
U sebi posjeduje brojne metode kojima se može
provjeravati dali je u određenoj varijabli
točno spremljen određeni tip podatka.
php izrazi - jedan od osnovnih pojmova svakog
programskog jezika, a i php-a.
Nešto što vidimo, što možemo napisati.
Može se računati, može dati rezultat, može
dati nekakvu aktivnost, nekakvu strukturu koda, 
izvršiti
Izrazi su u php-u u kombinaciji sa operatorima, 
operandima, varijablama, sve što na kraju ima nekakvu 
vrijednost, i što se može odbiti kao rezultat.
U www mapi treba kreirati folder osnove_php,
kopirati skripte iz osnova_html(linkovi.html,
liste.html,zadaca.html,vjezba.html) preimenovati 
u .php
Preimenovanje u vscode-u - doći do datoteke,
stisnuti F2 preimenujemo datoteku u php
kada odemo na localhost
kliknemo na datoteku
otvori se
php datoteke ne možemo otvarati lokalno
poput html-a, možemo samo pomoću servera
jer je potreban php interpreter
u browseru prikaže samo kod,ne prikazuje
stranicu(razlika između html-a i php-a)
možemo pisati čitav html kod u php-u ali se 
može izvršiti samo pomoću servera.
Napraviti novi file izrazi.php
<?php 
$ime="Pero";    $-varijabla
echo $ime;
$broj=10;
echo "Broj:$broj"; //ispis u istom redu
                   //nismo napisali <br>
                   //prepoznaje html kod (može koristiti sintaksu html-a) kada prikazuje na browseru, interpretira html kod
                   //ako to interpretira kao html, mi nigdje nismo rekli da želimo broj staviti u novi red.
echo "<br>Broj:$broj";
$oznaka=2;
$rezultat=$broj*$oznaka;
echo "<h2>Rezultat je $rezultat</h2>";
postoje i drugi načini ispisa
print,die,printf itd.
print radi isto što i echo 
print "<h3>Pozdrav svima</h3>";
printf se koristi za promatranje teksta, 
slično kao u -u, koristi iste specifikatore
tipa $s,$d,$f
Ako imamo ime Pero, Broj je 10, želimo ispisati preko printf-a
printf("Ime je: %s, Godine: %d");
s-označava string, d-(ili i)
%-cijeli broj 
f-pomični decimalni,
b - binarni, oktalni itd
printf("Ime je: %s, Oznaka %d");
die - ispis sa dijagnostičkim porukama,
koristi se recimo za spajanje na bazu podataka
pa ako veza pukne, nemamo što raditi
primjer ispisa sa izlazom
die("Dogodila se greška!");
obično se ispiše error sve poslije die, 
ako ima koda, taj kod se ne ispisuje u 
stranici
debugger kae unreachable code
zna da ga program neće izvršiti
exit(); ista stvar
//-komentar u jednoj liniji
?>
VARIJABLE
su veličine koje tijekom izvršavanja mogu mijenjati svoju vrijednost, 
zovemo ih na neki način spremnicima podataka
privremeno čuvaju neki podatak kod sebe
pravila pisanja varijabli: 
-moraju početi znakom dolar $
-iza dolara mora početi slovom ili znakom _
-varijabla ne može početi brojem, ali ga
može sadržavati
-php razlikuje velika i mala slova
-ime varijable mora biti definirano u skladu
sa značenjem vrijednosti koja se pamti u okviru 
varijable
-varijabli se dodjeljuje vrijednost omoću operatora =
napraviti novu datoteku 
varijable.php
<?php 
echo "<h1>varijable u php-u</h1>";
echo "<h2>pravila pisanja varijabli</h2>";
$ime="Pero"; //-jedna linija, objašnjenja ili isključivanje dijela koda
echo "Ime:$ime";
$grad="Zagreb";
/*...*/  - komentari u više linija
echo "<p>Osoba $ime oli grad $grad</p>";
(možemo koristiti i print)
echo '<p>Osoba $ime voli grad $grad</p>";
ispis - soba ime voli $grad
koja je razlika između jednostrukih i dvostrukih navodnika?
kad koristimo jedne, kad druge?
Što se tiče statičkog teksta, kada se radi o 
varijablama, jednostruki navodnik ispisuje ime,
tj. naziv varijable dok dvostruki navodnik ispisuje 
vrijednosti varijable (ključna razlika između jednostrukih i dvostrukih navodnika) 
kada se radi o ispisima
echo '<p> Vrijednost varijable $ime je';
echo "$ime</p>";
$_grad= - druga varijabla
$Grad= - druga varijabla
$Grad="Split";
echo "<br>Gradovi:$grad i $Grad";
$broj=10; //varijabli smo dodjelili integer
$brojka="100"; //varijabli smo dodjelili string
$zbroj = $brojka + $broj;
echo "<br>Zbroj je:$zbroj";
Zašto je zbrojio ta dva broja?PHP-u 
ne smeta za izvođenje računskih operacija 
aritmetičkih što je broj definiran kao 
string onaj gore kao integer u javascriptu to smeta,
ako u js-u nisu strogi integeri, on će jednostavno njima
pripojiti, rezultat bi bio 10100
$placa=5285.32; (decimalni broj se definira sa točkom)
echo "<br>Plaća:".$placa;
Inače, preporuka je da se varijable uvijek definiraju 
sa engleskom abecedom da se ne koriste hrvatski znakovi
nikad ne znamo gdje se u nekom trenutku može stvoriti problem, 
obično to se desi kad se negdje hosta kog hostinga koji 
ne podržava te znakove, stoga se 
preporučuje korištenje engleskog alfabeta
ovo su globalne varijable
varijabla - sadrži neki podatak koji se 
može mijenjati koji kroz skriptu može i 
zadržavati vrijednost itd.
osim varijabli, imamo i konstante
to su vrijednosti oje definiramo u 
php-u koje ne mijenjaju vrijednost
echo "<h2>Konstante</h2>";
echo PHP_VERSION;//verzija php-a
echo "<br>OS:";
echo PHP_OS; //vrsta operacijskog sustava
echo ___FILE___; //putanja do datoteke
echo "<br>";
echo ___DIR___; //naziv direktorija
tijekom izvođenja programa konstante se mijenjaju
to su bile predefinirane konstante.
PISANJE VLASTITIH
definira se pomoću izraza define i obično
se definiraju velikim slovima
može i malim ali nije preporučljivo
define("PI",3.14);
echo "<br>PI iznosi";echo PI;
možemo ih koristiti kada želimo neke 
vrijednosti da su fiksne primjerice 
spajanje na bazu
define("BAZAX","knjiznica");
define("USER", "phpuser");
define("PASS", "12345");
define("SERVER", "localhost");
svaku od njih možemo i ispisati
echo "<h2>Predefinirane varijable</h2>";
varijable koji php sustav podiže sam po sebi, 
kada se upali, neke od njih možemo sami 
koristiti (get, post, request, server, request uri)
$ime_servera=$_SERVER["SERVER_NAME"];
echo "<br>Ime servera:".$ime_servera;
localhost
može se promijeniti
c://windows/system32/drivers/etc/hosts
definiramo novi host, možemo reći kako nam se to može zvati
127.0.0.1 algebra_server
127.0.0.1 ucka.valeri.hr
spremimo promjene
trebamo je otvoriti administratorski
umjesto localhost upisati algebra_server
nakon toga restart apache servera
ne zaboraviti http://algebra_server
možda fali override all u apache httpd.conf
$metoda = $_SERVER['REQUEST_METHOD'];
echo "<br>Metoda:".$metoda;
popis metoda:
https://www.tutorialspoint.com/php/php_predefined_variables.htm
echo "<br>Doc root:"; echo $_SERVER['DOCUMENT_ROOT'];
TIPOVI PODATAKA
Ne postoji fiksni tipovi ne moram definirati i tipove varijable
možemo ih deklarirati unutar skripte bilo kad i pregaziti  
mijenjati tip varijable , mijenjati podatke jednog te istog sadržaja.
(integer, floating-point,string,logičke varijable, nizovi, objekti)
null - varijable kojima nije dodjeljena vrijednost imaju vrijednost 
null nepostojeća vrijednost,polje bez vrijednosti 
0 je isto vrijednost, ali nije null
U integer se mogu dodjeliti pozitivni i negativni brojevi
Možemo ih zapisati u dekadskom, oktalnom, li heksadecimalnom sustavu
Floating brojevi - brojevi sa pomičnom točkom
IEEE-64	bitni format 14 decimala
točnost nije garantirana
nije ih dobro uspoređivati jer ovise o broju decimala
string - tekstualni tipovi podataka
mogu se specificirati korištenjem jednog ili dva seta
delimitera, definiraju se između navodnika, možemo koristiti 
jednostruke i dvostruke navodnike.trebamo pripaziti kada 
ispisujemo varijable.
Jednostruki navodnici se mogu koristiti u dvostrukim,
i obrnuto, međutim nikad jedni unutar rugih (isti unutar istih)
moramo onda raditi escape stringa "\\","\";
varijable unutar jednostrukih se neće koristiti kao varijable, već kao
najobičnij niz znakova.
napraviti novi file
navodnici.php
<?php 
  echo "<p><a href='varijable.php'>Varijable</a></p>";
  echo "<p><a href=\"varijable.php\">Varijable</a></p>";
  echo '<p><a href=\'varijable.php\'>Varijable</a></p>';
  echo '<p><a href="varijable.php">Varijable</a></p>';
?>
OPERATORI
novi file operatori.php
html struktura
<?php 
echo "<h1>Operatori u php-u</h1>";
omogućuju izvršavanje operacija nad zbrajanjem, oduzimanjem itd.
unarni, binarni, ternarni operatori
echo "<h2>Operator dodjele</h2>";
dodjeljuje vrijednost varijabli  koja se nalazi na lijevoj strani, dok se vrijednost 
nalazi na desnoj strani
$broj=10;
echo "<br>Broj:".$broj;
$broj=20;
echo "<br>Broj:".$broj;
pregazili smo vrijednost varijable broj
ako trebamo sačuvati varijablu trebali bismo napraviti 
neku privremenu varijablu i staru(prethodnu) vrijednost 
spremiti u nju.
$temp=$broj;
echo "<br>Broj[prije nove dodjele imao je vrijednost:$temp]";
REFERENCA
$a=5;  VRIJEDNOST B OSTAJE NEPROMIJENJENA
$b= $a; VRIJEDNOST A POSTAJE 6
$a=6;
echo "<br>Vrijednost a je: $a";
echo "<br>Vrijednost b je: $b";
$a=5;
$b=&$a;
$a=6;
echo "<br>Vrijednost a:$a";
echo "<br>Vrijednost b:$b";
STRING OPERATORI
Operator . koji spaja više stringova u 1
$izraz="iznosi";
$br1=10;
$br2=5;
echo "<br>Zbroj ".$br1." i ".$br2.$izraz." ".($br1+$br2)";
echo "<br>Broj: ".$broj;
ARITMETIČKI OPERATORI
Operatori koje svakodnevno koristimo u životnim operacijama
+,-,/,* i % (djeljenje s ostatkom)
$broj1=20;
$broj2=7;
$rezultat=$broj1+$broj2;
echo "<br>Rezultat operatora + je:".$rezultat;
echo "<br>Broj1:".$broj1;
echo "<br>Broj2:".$broj2;
$rezultat=$broj1-$broj2;
echo "<br>Rezultat operatora - je:".$rezultat;
$rezultat=$broj1*$broj2;
echo "<br>Rezultat operatora * je:".$rezultat;
$rezultat=$broj1/$broj2;
echo "<br>Rezultat operatora /  je:".$rezultat;
$rezultat=$broj1%$broj2;
echo "<br>Rezultat operatora % je:".$rezultat;
Rezultat djeljenja bi trebali zaokružiti sa round() funkcijom
na tri decimale round($rezultat,3)
Rezultat će biti zaokružen na tri decimale 
% - djeljenje s ostatkom, rezultat ostatak
kreirajmo dva random broja -ctrl+q kratica za brzo 
dodavanje komentara na određeni broj linija koda, 
zacrniti ctrl+q, zakomentirati i otkomentirati
$broj1=rand(10,20); (donja granica, gornja granica) - granice
$broj2=rand(10,20);
primjeniti na prethodne rezultate
INKREMENTACIJSKI OPERATORI
echo "<h2>Inkrementacijski i dekrementacijski operatori</h2>";
Operatori koji povećavaju li smanjuju vrijednost za 1.
var++ - ada je operator ispred varijable
++var - kada je operator iza varijable
isto vrijedi i za --
echo "<p>Operator var++</p>";
To je operator koji prvo ispiše vrijednost, 
a u idućoj iteraciji poveća za jedan.
$x1=5;
echo '<br>Varijabla $x1 iznosi:'.$x1;
echo '<br>Varijabla $x1++ iznosi:'.$x1++;
povećava za jedan dobijemo ponovno 5
prvo ispiše vrijednost varijable, pa je onda
poveća za jedan, što znači da u idućoj iteraciji 
kada budemo htjeli ispisati x1 on će iznositi tek
sada 6
echo '<br>Varijabla $x1 iznosi:'.$x1;
prvo ispiše vrijednost, pa uveća za 1
echo '<br>Varijabla $x1++ iznosi:'.$x1++;
(ispisati će 6 i u idućoj iteraciji će povećati za 1
i ispisati 7) ipripremiti za 8
echo '<br>Varijabla $x1++ iznosi:'.$x1++;
echo "<p>Operator ++var</p>";
prvo uveća vrijednost pa je ispiše
$x2=20;
echo '<br>Varijabla $x2 iznosi:'.$x2;
echo '<br>Varijabla ++$x2 iznosi:'.++$x2;
prvo uvećaj, pa prikaži uvećano
echo '<br>Varijabla ++$x2 iznosi:'.++$x2;
(tri puta ponovi do 25 ispisa)
echo "<p>Operator var--</p>";
$x3=30;
echo '<br>Varijabla $x3 iznosi:'.$x3;
echo '<br>Varijabla $x3-- iznosi:'.$x3--;
(30,30)
echo '<br>Varijabla $x3-- iznosi:'.$x3--;
Još jednom ponovi
echo "<p>Operator --var </p>";
prvo umanji vrijednost, pa ispiše vrijednost
$x4=40;
echo '<br>Varijabla $x4 iznosi:'.$x4;
echo '<br>Varijabla --$x4 iznosi:'.--$x4;
(40,39) prvo umanji, pa prikaže
(ispiši još dva zadnja) do 37
KOMBINIRANI OPERATOR DODJELE
skraćeni način pridodavanja neke vrijednosti 
aritmetičkom operacijom ili operatorom . za spajanje 
stringom
$a=10;
$b=15;
$a=$a+$b;
echo "<br>a iznosi:".$a;
$a+=$b;//identično $a=$a+$b;
echo "<br>a iznosi:".$a;
$c=20;
$d=40;
$c*=$d;
echo $c;
/*kombinacija i sa -,/,%,. itd.*/
LOGIČKI OPERATORI
postoji najjednostavniji operator ; daju vrijednost true ili false,
ovisno o uvjetu koji smo mi napravili
OPERATOR AND &&
/*
0-laž(false)
1-istina(true)

            ulaz1   ulaz2  rezultat
              1       1       1
	      1       0       0
              0       1       0
              0       0       0
*/
true kada su svi ulazi true
$br1=10;
$br2=5;
$rez=$br1>4;
echo "<br>Rezultat:".$rez;
kako znamo da je true?
var_dump - php funkcija koja ispisuje detaljnu informaciju 
o varijabli koji je tip podatka ako je string
koja je vrijednost stringa kolika je duljina i za niz i za objekt
sve elemente i njegovu strukturu
echo "<br>Tip:";
var_dump($rez);
tip je boolean true
var_dump($d);
int(40)
$grad="Zagreb";
var_dump($grad);
string(6)"Zagreb"
$rez=$br1<3;
echo "<br>Rezultat:".$rez; echo "<br>Tip:"; var_dump($rez);
sad rezultat nije false false kao i null ništa ne predstavlja
i ne troši resurse da bi željeli prezentirati 0 kao false 
trebamo castati vrijednost i prije ispisa ubacimo int
echo "<br>Rezultat:".(int)$rez;
(pretvori taj izrazu integer budući da se radi o false 0) 
prva vrijednost koju će pretvoriti biti će nula
rezultat je 0
ovaj izraz smo pretvorili u integer
$rez=($br1>4 && $br2>4);
echo "<br>Rezultat:".(int)$rez; echo "<br>Tip:"; var_dump($rez);
false
//dali su oba broja parna
//broj je paran kad je djeljiv sa 2 odnosno 
//kad mu je ostatak 0
$rez=($broj1%2==0&&$broj2%2==0);
kopirati rezultat tip 
false deset je djeljiv 5 nije
razlika između = i ==
znak = je znak dodjele
== - pita dali je nešto jednako nečemu
OPERATOR OR
/*
0-laž(false)
1-istina(true)

                    ulaz1     ulaz2      rezultat
                      1         1           1
		      1         0	    1
		      0         1           1
                      0         0           0
*/
za istinu je dovoljan samo 1 ulaz da bi bilo istina, lažan je ako su samo oba lažna
$br1=10;
$br2=18;
$rez=($br1>4 || $br2>4);
echo "<br>Rezultat:".(int)$rez; echo "<br>Tip:"; var_dump($rez);
kombinacija tipki altgr+w se dobije simbol ||
res:true
$rez=($br1>2||$br2<5);
echo "<br>Rezultat:".(int)$rez; echo "<br>Tip:"; var_dump($rez);
rezultat je false
probati sa random
$br1=rand(10,20);
$br2=rand(10,20);
echo "<br> Brojevi su".$br1." i ".$br2;
rezultat je true
dali je jedan paran 
OPERATOR NOT
negira istinu i laž, ako je vrijednost 0
pretvori u jedan, 1 pretvori u 0
OPERATOR USKLIČNIKA
/*
!0=istina(true)
!1-laž(false)
*/
echo '<br>Varijable $drzava je postavljena:';
echo var_dump(isset($država));
isset je funkcija koja provjera dali je nešto postavljeno ili ne
false - rekli smo neistinu
nije postavljana + (!isset($drzava))
                 + (isset($rez)) (probati i negirati)
                 + (!isset($rez))
$indikator=true;
echo "<br>Not indikator:".var_dump(!$indikator);
nećemo kod više pisati, 
pogledati vježbe!
samo teoriju i objašnjenja
OPERATORI USPOREDBE
uspoređuju dvije ili više vrijednosti i vraćaju određeni rezultat
>-dali je prva vrijednost veća od druge true ako je veća
<-dali je prva vrijednost manja od druge true ako je manja
>=-dali je prva vrijednost veća ili jednaka drugoj true ako je
<=-dali je prva vrijednost manja ili jednaka drugoj onda je true
== - ako su brojevi jednaki onda je true
!= - dali je broj 1 jednak broju dva i dalji je broj 1 različit od broja 2
znak nejednakosti
operator identičnosti ima trostruki znak jednakosti ===
neidentičnosti dva znaka nejednakosti 
!==
razlika? Operator jednakosti provjerava dali dvije varijable imaju
istu vrijednost, dok operator identičnosti provjerava dali su te 
dvije varijable isti tip i ista vrijednost
Ako želimo da string broj i int broj budu identični trebamo napraviti cast
i pretvoriti u string
